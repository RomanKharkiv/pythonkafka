services:
  # Database
  postgres:
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:
      - "5432"
    volumes:
     - postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  ## Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/zookeeper.yml
    expose:
      - "2181"
    volumes:
      - ./jmx-exporter:/usr/share/jmx_exporter/

  kafka-broker-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker-1
    ports:
      - "19092:19092"
      - "9997:9997"
    depends_on:
      - zookeeper
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-broker-1 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_MESSAGE_MAX_BYTES: 5242880  # 5 MB
      KAFKA_MAX_REQUEST_SIZE: 5242880  # 5 MB for producer requests
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-broker.yml
    volumes:
      - ./jmx-exporter:/usr/share/jmx_exporter/

  kafka-broker-2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker-2
    ports:
      - "29092:29092"
      - "9998:9998"
    depends_on:
      - zookeeper
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9998
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-broker-1 -Dcom.sun.management.jmxremote.rmi.port=9998
      KAFKA_MESSAGE_MAX_BYTES: 5242880  # 5 MB
      KAFKA_MAX_REQUEST_SIZE: 5242880  # 5 MB for producers requests
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-broker.yml
    volumes:
       - ./jmx-exporter:/usr/share/jmx_exporter/

  kafka-broker-3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker-3
    ports:
      - "39092:39092"
      - "9999:9999"
    depends_on:
      - zookeeper
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9092,PLAINTEXT_INTERNAL://localhost:39092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-broker-3 -Dcom.sun.management.jmxremote.rmi.port=9999
      KAFKA_MESSAGE_MAX_BYTES: 5242880  # 5 MB
      KAFKA_MAX_REQUEST_SIZE: 5242880  # 5 MB for producers requests
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-broker.yml
    volumes:
       - ./jmx-exporter:/usr/share/jmx_exporter/

  ## Kafka Topics initialization
  kafka-init-topics:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
             cub kafka-ready -b kafka-broker-1:9092 1 30 && \
             kafka-topics --create --topic result.overall.proto --partitions 3 --replication-factor 2 --if-not-exists --bootstrap-server kafka-broker-3:9092 && \
             kafka-topics --create --topic result.overall.avro --partitions 3 --replication-factor 2 --if-not-exists --bootstrap-server kafka-broker-2:9092 && \
             kafka-topics --create --topic result.overall --partitions 3 --replication-factor 2 --if-not-exists --bootstrap-server kafka-broker-1:9092'"


  ## Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - schema-registry
    restart: on-failure
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-1:9092
      KAFKA_CLUSTERS_0_schema-registry: http://schema-registry:8085
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_1_NAME: local2
      KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: kafka-broker-2:9092
      KAFKA_CLUSTERS_1_SCHEMAREGISTRY: http://schema-registry:8085
      KAFKA_CLUSTERS_1_METRICS_PORT: 9998
      KAFKA_CLUSTERS_2_NAME: Local3
      KAFKA_CLUSTERS_2_BOOTSTRAPSERVERS: kafka-broker-3:9092
      KAFKA_CLUSTERS_2_SCHEMAREGISTRY: http://schema-registry:8085
      KAFKA_CLUSTERS_2_METRICS_PORT: 9999
      DYNAMIC_CONFIG_ENABLED: 'true'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    ports:
      - 8085:8085
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    restart: on-failure
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8085

      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_JMX_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/confluent_schemaregistry.yml
    volumes:
       - ./jmx-exporter:/usr/share/jmx_exporter/

  ## Kafka producers with fake egress messages
  producer:
    build:
      context: .
      dockerfile: docker/Dockerfile_producer
    container_name: producers
    image: my/kafka-producer:v2fd
    environment:
      KAFKA_TOPIC: result.overall
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    restart: on-failure

  ## Kafka consumers
  consumer:
    build:
      dockerfile: docker/Dockerfile_consumer
    image: my/kafka-consumer:v2jhd
    environment:
      KAFKA_TOPIC: result.overall
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - postgres
    restart: on-failure

  produce_proto:
    build:
      dockerfile: docker/Dockerfile_producer_proto
    image: my/producer-proto:dddf
    container_name: producer_proto2
    environment:
      KAFKA_TOPIC: result.overall.proto
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    restart: on-failure

  consumer_proto:
    build:
      dockerfile: docker/Dockerfile_consumer_proto
    image: my/consumer-proto:v2xd
    environment:
      KAFKA_TOPIC: result.overall.proto
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - postgres
    restart: on-failure

  produce_avro:
    build:
      dockerfile: docker/Dockerfile_producer_avro
    image: my/producer-avro:v2xd
    container_name: producer_avro_451w4
    environment:
      KAFKA_TOPIC: result.overall.avro
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    restart: on-failure

  consumer_avro:
    build:
      dockerfile: docker/Dockerfile_consumer_avro
    image: my/consumer-avro:v2xd
    environment:
      KAFKA_TOPIC: result.overall.avro
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - postgres
    restart: on-failure

  grafana:
    image: grafana/grafana
    container_name: grafana3
    ports:
      - 3000:3000
    restart: on-failure
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
    restart: on-failure

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}d@$postgres:5432/{POSTGRES_DB}?sslmode=disable"
    links:
      - postgres
      - prometheus
    restart: on-failure

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.4-7.6.0
    hostname: connect
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      KAFKA_JMX_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-connect.yml
    volumes:
      - ./schemas:/app/schemas
      - ./jmx-exporter:/usr/share/jmx_exporter/

  # akhq:
  #   image: tchiotludo/akhq:0.24.0
  #   environment:
  #     AKHQ_CONFIGURATION: |
  #       micronaut:
  #         security:
  #           enabled: true
  #           token:
  #             jwt:
  #               signatures:
  #                 secret:
  #                   generator:
  #                     secret: 7ca443c961d55f0962e7ec59756a618988fbc6803ee7e50f88a5317fa10008fb
  #       akhq:
  #         clients-defaults:
  #           consumer:
  #             properties:
  #               default.api.timeout.ms: 15000000
  #         connections:
  #           docker-kafka-server:
  #             properties:
  #               bootstrap.servers: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
  #             schema-registry:
  #               url: "http://schema-registry:8085"
  #             connect:
  #               - name: "connect"
  #                 url: "http://connect:8083"
  #         security:
  #           basic-auth:
  #             - username: myuser
  #               # SHA256 encoded password: "admin123"
  #               password: "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9" 
  #               groups:
  #                 - admin
  #           default-group: admin
  #           groups:
  #             admin:
  #               name: admin
  #               roles:
  #                 - topic/read
  #                 - topic/insert
  #                 - topic/delete
  #                 - topic/config/update
  #                 - node/read
  #                 - node/config/update
  #                 - topic/data/read
  #                 - topic/data/insert
  #                 - topic/data/delete
  #                 - group/read
  #                 - group/delete
  #                 - group/offsets/update
  #                 - registry/read
  #                 - registry/insert
  #                 - registry/update
  #                 - registry/delete
  #                 - registry/version/delete
  #                 - acls/read
  #                 - connect/read
  #                 - connect/insert
  #                 - connect/update
  #                 - connect/delete
  #                 - connect/state/update
  #   depends_on:
  #     - schema-registry
  #   ports:
  #     - 8090:8090
  #   links:
  #     - kafka-broker-1
  #     - kafka-broker-2
  #     - kafka-broker-3
  #     - schema-registry

volumes:
  grafana-data:
  pgadmin-data:
  postgres-data:


